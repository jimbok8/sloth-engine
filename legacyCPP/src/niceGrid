		/**
		 * int subdivideX = 2;
		 int subdivideY = 2;
		 float radius = 10.0f;
		 float colX = radius / (subdivideX);
		 float colY = radius / (subdivideY);
		 int index = 0;
		 int components = 3;
		 int bufferSize = subdivideX * triangleVertices.capacity() * subdivideY;

		 FloatBuffer gridVertexBuffer = BufferUtils.createFloatBuffer(bufferSize);
		 FloatBuffer gridColorBuffer = BufferUtils.createFloatBuffer(bufferSize);

		 for (int x = 0; x < subdivideX; x++) {
		 for(int y = 0; y < subdivideY; y++) {

		 for (int j = 0; j < triangleVertices.capacity(); j+=3) {

		 gridColorBuffer.put(vertexColors.get(j));
		 gridColorBuffer.put(vertexColors.get(j + 1));
		 gridColorBuffer.put(vertexColors.get(j + 2));

		 gridVertexBuffer.put(triangleVertices.get(j ) * x * colX);
		 gridVertexBuffer.put(triangleVertices.get(j + 1) * y * colY);
		 gridVertexBuffer.put(triangleVertices.get(j + 2));


		 }

		 }
		 }

		 gridColorBuffer.clear();
		 gridVertexBuffer.clear();
		 *
		 *
		 *
		 *
		 *
		 */
